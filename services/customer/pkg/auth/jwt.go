package auth

import (
	"errors"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

// üîê –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤ (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env)
var jwtSecret = []byte("super-secret-key")

// Claims —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∞
type Claims struct {
	CustomerID int `json:"customer_id"`
	jwt.RegisteredClaims
}

// GenerateToken —Å–æ–∑–¥–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func GenerateToken(customerID int) (string, error) {
	// ‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞: 24 —á–∞—Å–∞
	expirationTime := time.Now().Add(24 * time.Hour)

	// –°–æ–∑–¥–∞—ë–º claims (–ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–∫–µ–Ω–µ)
	claims := Claims{
		CustomerID: customerID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º HS256 (HMAC-SHA256)
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º
	return token.SignedString(jwtSecret)
}

// ParseToken –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT, –≤–æ–∑–≤—Ä–∞—â–∞—è customerID
func ParseToken(tokenString string) (int, error) {
	// –†–∞–∑–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
	token, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (interface{}, error) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HS256)
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–¥–ø–∏—Å–∏")
		}
		return jwtSecret, nil
	})

	if err != nil {
		return 0, err
	}

	// –î–µ–∫–æ–¥–∏—Ä—É–µ–º claims
	if claims, ok := token.Claims.(*Claims); ok && token.Valid {
		return claims.CustomerID, nil
	}

	return 0, errors.New("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
}
